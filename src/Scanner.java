// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: coolScanner.flex



// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int String = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\36\u0200\1\u0300\1\u0400\266\u0200\10\u0500\37\u0200"+
    "\1\u0600\u1000\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\1"+
    "\1\4\1\5\2\0\1\6\1\7\1\0\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\11\21"+
    "\1\0\1\22\1\23\1\24\1\25\2\0\1\26\2\27"+
    "\1\30\1\31\1\27\2\32\1\33\3\32\1\34\1\35"+
    "\1\32\1\36\1\32\1\37\1\40\4\32\1\41\2\32"+
    "\1\42\1\43\1\44\1\45\1\46\1\0\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\32"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\32\1\66"+
    "\1\67\1\70\1\71\1\72\1\73\1\41\1\74\1\32"+
    "\1\75\1\76\1\77\144\0\1\100\160\0\1\101\u0258\0"+
    "\1\102\165\0\1\103\u02da\0\1\103\2\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1792];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\2\17"+
    "\1\20\1\21\1\22\1\23\4\24\1\25\1\26\1\27"+
    "\15\24\1\30\1\1\1\31\1\1\1\32\1\33\1\1"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\0"+
    "\1\43\1\44\1\45\1\0\1\46\1\47\1\50\11\24"+
    "\1\51\1\24\1\52\14\24\1\53\1\0\1\32\3\0"+
    "\2\43\1\54\11\24\1\55\1\24\1\56\1\57\1\60"+
    "\1\24\1\61\4\24\1\62\5\24\1\63\2\0\1\43"+
    "\4\24\1\64\3\24\1\65\2\24\1\66\1\67\1\24"+
    "\1\70\3\24\1\71\1\72\2\24\1\73\2\24\1\74"+
    "\1\75\3\24\1\76\3\24\1\77\4\24\1\100\1\24"+
    "\1\101\1\102\1\103\10\24\1\104\4\24\1\105\56\24"+
    "\1\106\3\24\1\106\3\24\1\106\3\24\1\106\2\24"+
    "\1\106\1\24\1\106\1\24\1\106\1\24\1\106\1\24"+
    "\1\106\1\24\1\106\1\24\1\106\1\24\1\106";

  private static int [] zzUnpackAction() {
    int [] result = new int[262];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\210\0\314\0\u0110\0\210\0\210"+
    "\0\u0154\0\210\0\210\0\u0198\0\u01dc\0\210\0\u0220\0\210"+
    "\0\u0264\0\u02a8\0\u02ec\0\210\0\u0330\0\u0374\0\u03b8\0\u03fc"+
    "\0\u0440\0\u0484\0\u04c8\0\210\0\210\0\210\0\u050c\0\u0550"+
    "\0\u0594\0\u05d8\0\u061c\0\u0660\0\u06a4\0\u06e8\0\u072c\0\u0770"+
    "\0\u07b4\0\u07f8\0\u083c\0\210\0\u0880\0\210\0\u08c4\0\u0908"+
    "\0\210\0\u094c\0\210\0\210\0\210\0\210\0\210\0\210"+
    "\0\210\0\u0990\0\u09d4\0\210\0\u0a18\0\u0a5c\0\210\0\210"+
    "\0\210\0\u0aa0\0\u0ae4\0\u0b28\0\u0b6c\0\u0bb0\0\u0bf4\0\u0c38"+
    "\0\u0c7c\0\u0cc0\0\u0aa0\0\u0d04\0\u0aa0\0\u0d48\0\u0d8c\0\u0dd0"+
    "\0\u0e14\0\u0e58\0\u0e9c\0\u0ee0\0\u0f24\0\u0f68\0\u0fac\0\u0ff0"+
    "\0\u1034\0\210\0\u1078\0\210\0\u10bc\0\u1100\0\u1144\0\210"+
    "\0\u1188\0\u0a5c\0\u11cc\0\u1210\0\u1254\0\u1298\0\u12dc\0\u1320"+
    "\0\u1364\0\u13a8\0\u13ec\0\u11cc\0\u1430\0\u11cc\0\u11cc\0\u11cc"+
    "\0\u1474\0\u11cc\0\u14b8\0\u14fc\0\u1540\0\u1584\0\u11cc\0\u15c8"+
    "\0\u160c\0\u1650\0\u1694\0\u16d8\0\210\0\u171c\0\u1760\0\u1100"+
    "\0\u17a4\0\u17e8\0\u182c\0\u1870\0\u17a4\0\u18b4\0\u18f8\0\u193c"+
    "\0\u17a4\0\u1980\0\u19c4\0\u17a4\0\u17a4\0\u1a08\0\u17a4\0\u1a4c"+
    "\0\u1a90\0\u1ad4\0\u17a4\0\u17a4\0\u1b18\0\u1b5c\0\u1b5c\0\u1ba0"+
    "\0\u1be4\0\u1b5c\0\u1b5c\0\u1c28\0\u1c6c\0\u1cb0\0\u1b5c\0\u1cf4"+
    "\0\u1d38\0\u1d7c\0\u1b5c\0\u1dc0\0\u1e04\0\u1e48\0\u1e8c\0\u1dc0"+
    "\0\u1ed0\0\u1dc0\0\u1dc0\0\u1dc0\0\u1f14\0\u1f58\0\u1f9c\0\u1fe0"+
    "\0\u2024\0\u2068\0\u20ac\0\u20f0\0\u2068\0\u2134\0\u2178\0\u21bc"+
    "\0\u2200\0\u2178\0\u2244\0\u2288\0\u22cc\0\u2310\0\u2354\0\u2398"+
    "\0\u23dc\0\u2420\0\u2464\0\u24a8\0\u24ec\0\u2530\0\u2574\0\u25b8"+
    "\0\u25fc\0\u2640\0\u2684\0\u26c8\0\u270c\0\u2750\0\u2794\0\u27d8"+
    "\0\u281c\0\u2860\0\u28a4\0\u28e8\0\u292c\0\u2970\0\u29b4\0\u29f8"+
    "\0\u2a3c\0\u2a80\0\u2ac4\0\u2b08\0\u2b4c\0\u2b90\0\u2bd4\0\u2c18"+
    "\0\u2c5c\0\u2ca0\0\u2ce4\0\u2d28\0\u2d6c\0\u2db0\0\u2df4\0\u2e38"+
    "\0\u2e38\0\u2e7c\0\u2ec0\0\u2f04\0\u2f48\0\u2f8c\0\u2fd0\0\u3014"+
    "\0\u3058\0\u309c\0\u30e0\0\u3124\0\u3124\0\u3168\0\u31ac\0\u31ac"+
    "\0\u31f0\0\u3234\0\u3278\0\u32bc\0\u3300\0\u3344\0\u3388\0\u33cc"+
    "\0\u3410\0\u3454\0\u3498\0\u34dc\0\210\0\u3520";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[262];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\6\31\1\33\2\31\1\34\1\3\1\35\1\36\1\3"+
    "\1\31\1\37\1\40\1\31\1\41\1\42\2\31\1\43"+
    "\1\31\1\44\1\31\1\45\1\31\1\46\1\47\1\50"+
    "\1\51\1\31\1\52\1\53\1\31\1\54\1\55\1\56"+
    "\1\57\3\3\2\60\2\3\1\60\1\61\35\60\1\62"+
    "\40\60\106\0\1\4\125\0\1\63\66\0\1\64\120\0"+
    "\1\65\72\0\1\66\10\0\1\67\74\0\1\70\6\0"+
    "\1\71\71\0\1\72\4\0\1\73\4\0\1\74\75\0"+
    "\1\75\1\0\2\23\17\0\1\76\60\0\1\75\1\0"+
    "\2\23\106\0\1\77\103\0\1\100\103\0\1\101\77\0"+
    "\2\102\4\0\14\102\4\0\20\102\1\103\6\102\27\0"+
    "\2\102\4\0\14\102\4\0\27\102\27\0\2\102\4\0"+
    "\14\102\4\0\5\102\1\104\21\102\27\0\2\102\4\0"+
    "\14\102\4\0\5\102\1\105\21\102\27\0\2\102\4\0"+
    "\14\102\4\0\16\102\1\106\1\102\1\107\6\102\27\0"+
    "\2\102\4\0\14\102\4\0\13\102\1\110\2\102\1\111"+
    "\10\102\27\0\2\102\4\0\14\102\4\0\13\102\1\112"+
    "\13\102\27\0\2\102\4\0\14\102\4\0\11\102\1\113"+
    "\4\102\1\114\10\102\27\0\2\102\4\0\14\102\4\0"+
    "\6\102\1\115\6\102\1\116\11\102\27\0\2\102\4\0"+
    "\14\102\4\0\5\102\1\117\10\102\1\120\10\102\27\0"+
    "\2\102\4\0\14\102\4\0\5\102\1\121\21\102\27\0"+
    "\2\102\4\0\14\102\4\0\16\102\1\122\1\102\1\123"+
    "\6\102\27\0\2\102\4\0\14\102\4\0\5\102\1\124"+
    "\10\102\1\125\10\102\27\0\2\102\4\0\14\102\4\0"+
    "\22\102\1\126\4\102\27\0\2\102\4\0\14\102\4\0"+
    "\10\102\1\127\16\102\27\0\2\102\4\0\14\102\4\0"+
    "\16\102\1\130\10\102\27\0\2\102\4\0\14\102\4\0"+
    "\10\102\1\131\16\102\105\0\1\132\107\0\1\133\1\0"+
    "\2\60\2\0\1\60\1\0\35\60\1\0\40\60\43\0"+
    "\1\134\17\0\1\134\2\0\1\134\1\0\1\134\7\0"+
    "\1\135\3\0\12\136\1\137\71\136\2\73\1\140\1\141"+
    "\1\73\1\0\35\73\1\0\40\73\20\0\2\75\102\0"+
    "\2\142\4\0\4\142\15\0\6\142\47\0\2\143\4\0"+
    "\14\143\4\0\27\143\27\0\2\143\4\0\14\143\4\0"+
    "\20\143\1\144\6\143\27\0\2\143\4\0\14\143\4\0"+
    "\3\143\1\145\23\143\27\0\2\143\4\0\14\143\4\0"+
    "\1\143\1\146\25\143\27\0\2\143\4\0\14\143\4\0"+
    "\16\143\1\147\10\143\27\0\2\143\4\0\14\143\4\0"+
    "\5\143\1\150\21\143\27\0\2\143\4\0\14\143\4\0"+
    "\1\143\1\151\25\143\27\0\2\143\4\0\14\143\4\0"+
    "\15\143\1\152\11\143\27\0\2\143\4\0\14\143\4\0"+
    "\21\143\1\153\5\143\27\0\2\143\4\0\14\143\4\0"+
    "\20\143\1\154\6\143\27\0\2\143\4\0\14\143\4\0"+
    "\1\155\21\143\1\156\4\143\27\0\2\143\4\0\14\143"+
    "\4\0\15\143\1\157\4\143\1\160\4\143\27\0\2\143"+
    "\4\0\14\143\4\0\16\143\1\161\10\143\27\0\2\143"+
    "\4\0\14\143\4\0\25\143\1\162\1\143\27\0\2\143"+
    "\4\0\14\143\4\0\16\143\1\163\10\143\27\0\2\143"+
    "\4\0\14\143\4\0\11\143\1\164\15\143\27\0\2\143"+
    "\4\0\14\143\4\0\1\143\1\165\20\143\1\166\4\143"+
    "\27\0\2\143\4\0\14\143\4\0\6\143\1\167\20\143"+
    "\27\0\2\143\4\0\14\143\4\0\1\143\1\170\16\143"+
    "\1\171\6\143\27\0\2\143\4\0\14\143\4\0\5\143"+
    "\1\172\21\143\27\0\2\143\4\0\14\143\4\0\11\143"+
    "\1\173\15\143\27\0\2\143\4\0\14\143\4\0\11\143"+
    "\1\174\15\143\110\0\1\175\104\0\1\176\1\0\12\136"+
    "\1\177\103\136\1\177\4\136\1\200\64\136\2\0\1\140"+
    "\121\0\2\201\4\0\14\201\4\0\27\201\27\0\2\201"+
    "\4\0\14\201\4\0\1\201\1\202\25\201\27\0\2\201"+
    "\4\0\14\201\4\0\11\201\1\203\15\201\27\0\2\201"+
    "\4\0\14\201\4\0\13\201\1\204\13\201\27\0\2\201"+
    "\4\0\14\201\4\0\13\201\1\205\13\201\27\0\2\201"+
    "\4\0\14\201\4\0\1\201\1\206\25\201\27\0\2\201"+
    "\4\0\14\201\4\0\21\201\1\207\5\201\27\0\2\201"+
    "\4\0\14\201\4\0\22\201\1\210\4\201\27\0\2\201"+
    "\4\0\14\201\4\0\5\201\1\211\21\201\27\0\2\201"+
    "\4\0\14\201\4\0\11\201\1\212\7\201\1\213\5\201"+
    "\27\0\2\201\4\0\14\201\4\0\17\201\1\214\7\201"+
    "\27\0\2\201\4\0\14\201\4\0\13\201\1\215\13\201"+
    "\27\0\2\201\4\0\14\201\4\0\15\201\1\216\11\201"+
    "\27\0\2\201\4\0\14\201\4\0\13\201\1\217\13\201"+
    "\27\0\2\201\4\0\14\201\4\0\23\201\1\220\3\201"+
    "\27\0\2\201\4\0\14\201\4\0\22\201\1\221\4\201"+
    "\27\0\2\201\4\0\14\201\4\0\11\201\1\222\15\201"+
    "\27\0\2\201\4\0\14\201\4\0\15\201\1\223\11\201"+
    "\27\0\2\201\4\0\14\201\4\0\4\201\1\224\22\201"+
    "\27\0\2\201\4\0\14\201\4\0\13\201\1\225\13\201"+
    "\112\0\1\134\12\136\1\177\4\136\1\140\64\136\20\0"+
    "\2\226\4\0\14\226\4\0\27\226\27\0\2\226\4\0"+
    "\14\226\4\0\26\226\1\227\27\0\2\226\4\0\14\226"+
    "\4\0\14\226\1\230\12\226\27\0\2\226\4\0\7\226"+
    "\1\231\4\226\4\0\27\226\27\0\2\226\4\0\14\226"+
    "\4\0\12\226\1\232\14\226\27\0\2\226\4\0\14\226"+
    "\4\0\21\226\1\233\5\226\27\0\2\226\4\0\14\226"+
    "\4\0\11\226\1\234\15\226\27\0\2\226\4\0\14\226"+
    "\4\0\15\226\1\235\11\226\27\0\2\226\4\0\14\226"+
    "\4\0\22\226\1\236\4\226\27\0\2\226\4\0\14\226"+
    "\4\0\22\226\1\237\4\226\27\0\2\226\4\0\14\226"+
    "\4\0\20\226\1\240\6\226\27\0\2\226\4\0\14\226"+
    "\4\0\11\226\1\241\15\226\27\0\2\226\4\0\14\226"+
    "\4\0\15\226\1\242\11\226\27\0\2\226\4\0\14\226"+
    "\4\0\5\226\1\243\21\226\27\0\2\244\4\0\14\244"+
    "\4\0\27\244\27\0\2\244\4\0\14\244\4\0\1\244"+
    "\1\245\25\244\27\0\2\244\4\0\14\244\4\0\23\244"+
    "\1\246\3\244\27\0\2\244\4\0\14\244\4\0\15\244"+
    "\1\247\11\244\27\0\2\244\4\0\14\244\4\0\22\244"+
    "\1\250\4\244\27\0\2\244\4\0\14\244\4\0\20\244"+
    "\1\251\6\244\27\0\2\244\4\0\14\244\4\0\15\244"+
    "\1\252\11\244\27\0\2\244\4\0\14\244\4\0\3\244"+
    "\1\253\23\244\27\0\2\244\4\0\14\244\4\0\7\244"+
    "\1\254\17\244\27\0\2\255\4\0\14\255\4\0\27\255"+
    "\27\0\2\255\4\0\14\255\4\0\13\255\1\256\13\255"+
    "\27\0\2\255\4\0\14\255\4\0\14\255\1\257\12\255"+
    "\27\0\2\255\4\0\14\255\4\0\23\255\1\260\3\255"+
    "\27\0\2\255\4\0\14\255\4\0\11\255\1\261\15\255"+
    "\27\0\2\262\4\0\14\262\4\0\27\262\27\0\2\262"+
    "\4\0\5\262\1\263\6\262\4\0\27\262\27\0\2\262"+
    "\4\0\14\262\4\0\2\262\1\264\24\262\27\0\2\262"+
    "\4\0\14\262\4\0\5\262\1\265\21\262\27\0\2\262"+
    "\4\0\14\262\4\0\15\262\1\266\11\262\27\0\2\267"+
    "\4\0\14\267\4\0\27\267\27\0\2\267\4\0\14\267"+
    "\4\0\15\267\1\270\11\267\27\0\2\267\4\0\14\267"+
    "\4\0\5\267\1\271\21\267\27\0\2\267\4\0\14\267"+
    "\4\0\7\267\1\272\17\267\27\0\2\273\4\0\14\273"+
    "\4\0\27\273\27\0\2\273\4\0\14\273\4\0\22\273"+
    "\1\274\4\273\27\0\2\273\4\0\14\273\4\0\20\273"+
    "\1\275\6\273\27\0\2\276\4\0\14\276\4\0\27\276"+
    "\27\0\2\276\4\0\14\276\4\0\5\276\1\277\21\276"+
    "\27\0\2\276\4\0\3\276\1\300\10\276\4\0\5\276"+
    "\1\300\21\276\27\0\2\301\4\0\14\301\4\0\27\301"+
    "\27\0\2\301\4\0\14\301\4\0\7\301\1\302\17\301"+
    "\27\0\2\301\4\0\6\301\1\303\1\301\1\304\3\301"+
    "\4\0\27\301\27\0\2\305\4\0\14\305\4\0\27\305"+
    "\27\0\2\305\4\0\14\305\4\0\5\305\1\306\21\305"+
    "\27\0\2\305\4\0\14\305\4\0\11\305\1\307\15\305"+
    "\27\0\2\305\4\0\14\305\4\0\13\305\1\310\13\305"+
    "\27\0\2\311\4\0\14\311\4\0\27\311\27\0\2\311"+
    "\4\0\14\311\4\0\20\311\1\312\6\311\27\0\2\311"+
    "\4\0\14\311\4\0\15\311\1\313\11\311\27\0\2\311"+
    "\4\0\14\311\4\0\23\311\1\314\3\311\27\0\2\315"+
    "\4\0\14\315\4\0\27\315\27\0\2\315\4\0\3\315"+
    "\1\316\10\315\4\0\5\315\1\316\21\315\27\0\2\315"+
    "\4\0\14\315\4\0\23\315\1\317\3\315\27\0\2\315"+
    "\4\0\14\315\4\0\21\315\1\320\5\315\27\0\2\321"+
    "\4\0\14\321\4\0\27\321\27\0\2\321\4\0\6\321"+
    "\1\322\1\321\1\323\3\321\4\0\27\321\27\0\2\321"+
    "\4\0\14\321\4\0\21\321\1\324\5\321\27\0\2\321"+
    "\4\0\12\321\1\325\1\321\4\0\27\321\27\0\2\326"+
    "\4\0\14\326\4\0\27\326\27\0\2\326\4\0\14\326"+
    "\4\0\11\326\1\327\15\326\27\0\2\326\4\0\14\326"+
    "\4\0\13\326\1\330\13\326\27\0\2\326\4\0\12\326"+
    "\1\331\1\326\4\0\27\326\27\0\2\326\4\0\14\326"+
    "\4\0\11\326\1\332\15\326\27\0\2\333\4\0\14\333"+
    "\4\0\27\333\27\0\2\333\4\0\14\333\4\0\15\333"+
    "\1\334\11\333\27\0\2\333\4\0\14\333\4\0\23\333"+
    "\1\335\3\333\27\0\2\333\4\0\14\333\4\0\11\333"+
    "\1\336\15\333\27\0\2\333\4\0\14\333\4\0\7\333"+
    "\1\337\17\333\27\0\2\340\4\0\14\340\4\0\27\340"+
    "\27\0\2\340\4\0\14\340\4\0\23\340\1\341\3\340"+
    "\27\0\2\340\4\0\14\340\4\0\21\340\1\342\5\340"+
    "\27\0\2\340\4\0\14\340\4\0\7\340\1\343\17\340"+
    "\27\0\2\340\4\0\14\340\4\0\15\340\1\344\11\340"+
    "\27\0\2\345\4\0\14\345\4\0\27\345\27\0\2\345"+
    "\4\0\14\345\4\0\21\345\1\346\5\345\27\0\2\345"+
    "\4\0\12\345\1\347\1\345\4\0\27\345\27\0\2\345"+
    "\4\0\14\345\4\0\15\345\1\350\11\345\27\0\2\351"+
    "\4\0\14\345\4\0\27\345\27\0\2\352\4\0\14\352"+
    "\4\0\27\352\27\0\2\352\4\0\12\352\1\353\1\352"+
    "\4\0\27\352\27\0\2\352\4\0\14\352\4\0\11\352"+
    "\1\354\15\352\27\0\2\355\4\0\14\352\4\0\27\352"+
    "\27\0\2\356\4\0\14\356\4\0\27\356\27\0\2\356"+
    "\4\0\14\356\4\0\11\356\1\357\15\356\27\0\2\356"+
    "\4\0\14\356\4\0\7\356\1\360\17\356\27\0\2\361"+
    "\4\0\14\356\4\0\27\356\27\0\2\362\4\0\14\362"+
    "\4\0\27\362\27\0\2\362\4\0\14\362\4\0\7\362"+
    "\1\363\17\362\27\0\2\362\4\0\14\362\4\0\15\362"+
    "\1\364\11\362\27\0\2\365\4\0\14\362\4\0\27\362"+
    "\27\0\2\366\4\0\14\366\4\0\27\366\27\0\2\366"+
    "\4\0\14\366\4\0\15\366\1\367\11\366\27\0\2\370"+
    "\4\0\14\366\4\0\27\366\27\0\2\371\4\0\14\371"+
    "\4\0\27\371\27\0\2\372\4\0\14\371\4\0\27\371"+
    "\27\0\2\373\4\0\14\373\4\0\27\373\27\0\2\374"+
    "\4\0\14\373\4\0\27\373\27\0\2\375\4\0\14\375"+
    "\4\0\27\375\27\0\2\376\4\0\14\375\4\0\27\375"+
    "\27\0\2\377\4\0\14\377\4\0\27\377\27\0\2\u0100"+
    "\4\0\14\377\4\0\27\377\27\0\2\u0101\4\0\14\u0101"+
    "\4\0\27\u0101\27\0\2\u0102\4\0\14\u0101\4\0\27\u0101"+
    "\27\0\2\u0103\4\0\14\u0103\4\0\27\u0103\27\0\2\u0104"+
    "\4\0\14\u0103\4\0\27\u0103\27\0\2\u0105\4\0\14\u0105"+
    "\4\0\27\u0105\27\0\2\u0106\4\0\14\u0105\4\0\27\u0105"+
    "\27\0\2\u0106\62\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13668];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\2\1\2\11\1\1\2\11\2\1\1\11"+
    "\1\1\1\11\3\1\1\11\7\1\3\11\15\1\1\11"+
    "\1\1\1\11\2\1\1\11\1\1\7\11\1\0\1\1"+
    "\1\11\1\1\1\0\3\11\30\1\1\11\1\0\1\11"+
    "\3\0\1\11\34\1\1\11\2\0\205\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[262];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    public int ICV = 0;
    public boolean BOOL = false;
    public double REAL = 0;
    public StringBuilder string = new StringBuilder();

    private double getValueOfScientificNumber(String scientific) {
        int index = 0;
        if (scientific.contains("e"))
            index = scientific.indexOf("e");
        else if (scientific.contains("E"))
            index = scientific.indexOf("E");
        double value = 0;
        if (index > 0) {
            int base = Integer.parseInt(scientific.substring(0, index));
            int exp = Integer.parseInt(scientific.substring(index + 1));
            value = base * Math.pow(10, exp);
        } else if (index < 0)
            value = Double.parseDouble(scientific);
        else
            throw new NumberFormatException();
        return value;
    }

    private int getValueOfHexadecimalNumber(String hex) {
        String pureHex = hex.charAt(0) == '-' ? "-" + hex.substring(3) : hex.substring(2);
        return Integer.parseInt(pureHex, 16);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Symbol nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new RuntimeException("Illegal character \"" + yytext() + "\" at line "+yyline+", column " + yycolumn);
            }
            // fall through
          case 71: break;
          case 2:
            { /* ignore */
            }
            // fall through
          case 72: break;
          case 3:
            { return (new Symbol("!"));
            }
            // fall through
          case 73: break;
          case 4:
            { yybegin(String);
        string.setLength(0);
        string.append("\"");
            }
            // fall through
          case 74: break;
          case 5:
            { return (new Symbol("%"));
            }
            // fall through
          case 75: break;
          case 6:
            { return (new Symbol("&"));
            }
            // fall through
          case 76: break;
          case 7:
            { return (new Symbol("("));
            }
            // fall through
          case 77: break;
          case 8:
            { return (new Symbol(")"));
            }
            // fall through
          case 78: break;
          case 9:
            { return (new Symbol("*"));
            }
            // fall through
          case 79: break;
          case 10:
            { return (new Symbol("+"));
            }
            // fall through
          case 80: break;
          case 11:
            { return (new Symbol(","));
            }
            // fall through
          case 81: break;
          case 12:
            { return (new Symbol("-"));
            }
            // fall through
          case 82: break;
          case 13:
            { return (new Symbol("."));
            }
            // fall through
          case 83: break;
          case 14:
            { return (new Symbol("/"));
            }
            // fall through
          case 84: break;
          case 15:
            { ICV = Integer.parseInt(yytext());
        return new Symbol("decimal", ICV);
            }
            // fall through
          case 85: break;
          case 16:
            { return (new Symbol(";"));
            }
            // fall through
          case 86: break;
          case 17:
            { return (new Symbol("<"));
            }
            // fall through
          case 87: break;
          case 18:
            { return (new Symbol("="));
            }
            // fall through
          case 88: break;
          case 19:
            { return (new Symbol(">"));
            }
            // fall through
          case 89: break;
          case 20:
            { return new Symbol("identifier", yytext());
            }
            // fall through
          case 90: break;
          case 21:
            { return (new Symbol("["));
            }
            // fall through
          case 91: break;
          case 22:
            { return (new Symbol("]"));
            }
            // fall through
          case 92: break;
          case 23:
            { return (new Symbol("^"));
            }
            // fall through
          case 93: break;
          case 24:
            { return (new Symbol("{"));
            }
            // fall through
          case 94: break;
          case 25:
            { return (new Symbol("}"));
            }
            // fall through
          case 95: break;
          case 26:
            { string.append(yytext());
            }
            // fall through
          case 96: break;
          case 27:
            { yybegin(YYINITIAL);
        string.append("\"");
        StringBuilder temp = string;
        string = new StringBuilder();
        return new Symbol("stringLiteral", temp.toString());
            }
            // fall through
          case 97: break;
          case 28:
            { return (new Symbol("!="));
            }
            // fall through
          case 98: break;
          case 29:
            { return (new Symbol("&&"));
            }
            // fall through
          case 99: break;
          case 30:
            { return (new Symbol("*="));
            }
            // fall through
          case 100: break;
          case 31:
            { return (new Symbol("++"));
            }
            // fall through
          case 101: break;
          case 32:
            { return (new Symbol("+="));
            }
            // fall through
          case 102: break;
          case 33:
            { return (new Symbol("--"));
            }
            // fall through
          case 103: break;
          case 34:
            { return (new Symbol("-="));
            }
            // fall through
          case 104: break;
          case 35:
            { return new Symbol("comment", yytext());
            }
            // fall through
          case 105: break;
          case 36:
            { return (new Symbol("/="));
            }
            // fall through
          case 106: break;
          case 37:
            { REAL = Double.valueOf(yytext());
        return new Symbol("realNumber", REAL);
            }
            // fall through
          case 107: break;
          case 38:
            { return (new Symbol("<="));
            }
            // fall through
          case 108: break;
          case 39:
            { return (new Symbol("=="));
            }
            // fall through
          case 109: break;
          case 40:
            { return (new Symbol(">="));
            }
            // fall through
          case 110: break;
          case 41:
            { return (new Symbol("fi"));
            }
            // fall through
          case 111: break;
          case 42:
            { return (new Symbol("if"));
            }
            // fall through
          case 112: break;
          case 43:
            { return (new Symbol("|"));
            }
            // fall through
          case 113: break;
          case 44:
            { ICV = getValueOfHexadecimalNumber(yytext());
        return new Symbol("hexadecimal", ICV);
            }
            // fall through
          case 114: break;
          case 45:
            { return (new Symbol("for"));
            }
            // fall through
          case 115: break;
          case 46:
            { return (new Symbol("int", yytext()));
            }
            // fall through
          case 116: break;
          case 47:
            { return (new Symbol("len"));
            }
            // fall through
          case 117: break;
          case 48:
            { return (new Symbol("let"));
            }
            // fall through
          case 118: break;
          case 49:
            { return (new Symbol("new"));
            }
            // fall through
          case 119: break;
          case 50:
            { return (new Symbol("rof"));
            }
            // fall through
          case 120: break;
          case 51:
            { return (new Symbol("“"));
            }
            // fall through
          case 121: break;
          case 52:
            { return (new Symbol("bool", yytext()));
            }
            // fall through
          case 122: break;
          case 53:
            { return (new Symbol("else"));
            }
            // fall through
          case 123: break;
          case 54:
            { return (new Symbol("loop"));
            }
            // fall through
          case 124: break;
          case 55:
            { return (new Symbol("pool"));
            }
            // fall through
          case 125: break;
          case 56:
            { return (new Symbol("real"));
            }
            // fall through
          case 126: break;
          case 57:
            { return (new Symbol("then"));
            }
            // fall through
          case 127: break;
          case 58:
            { return (new Symbol("void"));
            }
            // fall through
          case 128: break;
          case 59:
            { return (new Symbol("Array"));
            }
            // fall through
          case 129: break;
          case 60:
            { return (new Symbol("break"));
            }
            // fall through
          case 130: break;
          case 61:
            { return (new Symbol("class"));
            }
            // fall through
          case 131: break;
          case 62:
            { return (new Symbol("print"));
            }
            // fall through
          case 132: break;
          case 63:
            { return (new Symbol("while"));
            }
            // fall through
          case 133: break;
          case 64:
            { return (new Symbol("in_int"));
            }
            // fall through
          case 134: break;
          case 65:
            { return (new Symbol("return"));
            }
            // fall through
          case 135: break;
          case 66:
            { return (new Symbol("static"));
            }
            // fall through
          case 136: break;
          case 67:
            { return (new Symbol("string", yytext()));
            }
            // fall through
          case 137: break;
          case 68:
            { return (new Symbol("continue"));
            }
            // fall through
          case 138: break;
          case 69:
            { return (new Symbol("in_string"));
            }
            // fall through
          case 139: break;
          case 70:
            { REAL = getValueOfScientificNumber(yytext());
        return new Symbol("scientificNotation", REAL);
            }
            // fall through
          case 140: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
