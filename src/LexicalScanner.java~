// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: coolScanner.flex



// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class LexicalScanner implements Lexical {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int String = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\36\u0200\1\u0300\u10df\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\1"+
    "\1\4\1\5\2\0\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\11\22"+
    "\1\0\1\23\1\24\1\25\1\26\2\0\1\27\3\30"+
    "\1\31\1\30\21\32\1\33\2\32\1\34\1\35\1\36"+
    "\1\37\1\40\1\0\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\32\1\52\1\53\1\32"+
    "\1\54\1\55\1\56\1\32\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\33\1\65\1\32\1\66\1\67\1\70"+
    "\144\0\1\71\160\0\1\72\u0258\0\1\73\123\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\2\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\2\20\1\21\1\22\1\23\1\24\2\25\1\26\1\27"+
    "\1\30\15\25\1\31\1\1\1\32\1\1\1\33\1\34"+
    "\1\1\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\0\1\44\1\45\1\46\2\0\1\47\1\50\1\51"+
    "\7\25\1\52\1\25\1\53\14\25\1\54\1\0\1\55"+
    "\2\0\2\44\1\0\1\56\1\57\7\25\1\60\1\25"+
    "\1\61\1\62\1\63\1\25\1\64\4\25\1\65\5\25"+
    "\1\66\1\0\1\44\2\25\1\67\3\25\1\70\2\25"+
    "\1\71\1\72\1\25\1\73\3\25\1\74\1\75\2\25"+
    "\1\76\1\77\1\100\3\25\1\101\3\25\1\102\2\25"+
    "\1\103\1\25\1\104\1\105\1\106\4\25\1\107\2\25"+
    "\1\110\26\25";

  private static int [] zzUnpackAction() {
    int [] result = new int[192];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\170\0\170\0\264\0\360\0\170"+
    "\0\170\0\u012c\0\170\0\170\0\u0168\0\u01a4\0\170\0\u01e0"+
    "\0\170\0\u021c\0\u0258\0\u0294\0\170\0\u02d0\0\u030c\0\u0348"+
    "\0\u0384\0\u03c0\0\170\0\170\0\170\0\u03fc\0\u0438\0\u0474"+
    "\0\u04b0\0\u04ec\0\u0528\0\u0564\0\u05a0\0\u05dc\0\u0618\0\u0654"+
    "\0\u0690\0\u06cc\0\170\0\u0708\0\170\0\u0744\0\u0780\0\170"+
    "\0\u07bc\0\170\0\170\0\170\0\170\0\170\0\170\0\170"+
    "\0\u07f8\0\u0834\0\170\0\u0870\0\u08ac\0\u08e8\0\170\0\170"+
    "\0\170\0\u0924\0\u0960\0\u099c\0\u09d8\0\u0a14\0\u0a50\0\u0a8c"+
    "\0\u0924\0\u0ac8\0\u0924\0\u0b04\0\u0b40\0\u0b7c\0\u0bb8\0\u0bf4"+
    "\0\u0c30\0\u0c6c\0\u0ca8\0\u0ce4\0\u0d20\0\u0d5c\0\u0d98\0\170"+
    "\0\u0dd4\0\170\0\u0e10\0\u0e4c\0\170\0\u0e88\0\u0ec4\0\u0ec4"+
    "\0\u08e8\0\u0f00\0\u0f3c\0\u0f78\0\u0fb4\0\u0ff0\0\u102c\0\u1068"+
    "\0\u0f00\0\u10a4\0\u0f00\0\u0f00\0\u0f00\0\u10e0\0\u0f00\0\u111c"+
    "\0\u1158\0\u1194\0\u11d0\0\u0f00\0\u120c\0\u1248\0\u1284\0\u12c0"+
    "\0\u12fc\0\170\0\u1338\0\u0e10\0\u1374\0\u13b0\0\u1374\0\u13ec"+
    "\0\u1428\0\u1464\0\u1374\0\u14a0\0\u14dc\0\u1374\0\u1374\0\u1518"+
    "\0\u1374\0\u1554\0\u1590\0\u15cc\0\u1374\0\u1374\0\u1608\0\u1644"+
    "\0\u1644\0\u1644\0\u1644\0\u1680\0\u16bc\0\u16f8\0\u1644\0\u1734"+
    "\0\u1770\0\u17ac\0\u1644\0\u17e8\0\u1824\0\u17e8\0\u1860\0\u17e8"+
    "\0\u17e8\0\u17e8\0\u189c\0\u18d8\0\u1914\0\u1950\0\u1950\0\u198c"+
    "\0\u19c8\0\u19c8\0\u1a04\0\u1a40\0\u1a7c\0\u1ab8\0\u1af4\0\u1b30"+
    "\0\u1b6c\0\u1ba8\0\u1be4\0\u1c20\0\u1c5c\0\u1c98\0\u1cd4\0\u1d10"+
    "\0\u1d4c\0\u1d88\0\u1dc4\0\u1e00\0\u1e3c\0\u1e78\0\u1eb4\0\170";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[192];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\3\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\4\32\1\33\1\3\1\34\1\35\1\3\1\32\1\36"+
    "\1\37\1\32\1\40\1\41\2\32\1\42\1\32\1\43"+
    "\1\44\1\32\1\45\1\46\1\47\1\50\1\32\1\51"+
    "\1\52\1\32\1\53\1\54\1\55\1\56\2\3\2\57"+
    "\2\3\1\57\1\60\27\57\1\61\36\57\76\0\1\5"+
    "\116\0\1\62\55\0\1\63\111\0\1\64\62\0\1\65"+
    "\10\0\1\66\64\0\1\67\6\0\1\70\61\0\1\71"+
    "\4\0\1\72\4\0\1\73\65\0\1\74\1\0\2\24"+
    "\6\0\1\75\1\0\1\76\11\0\1\75\45\0\1\74"+
    "\1\0\2\24\6\0\1\75\13\0\1\75\53\0\1\77"+
    "\73\0\1\100\73\0\1\101\67\0\2\102\4\0\5\102"+
    "\4\0\17\102\1\103\6\102\27\0\2\102\4\0\5\102"+
    "\4\0\26\102\27\0\2\102\4\0\5\102\4\0\15\102"+
    "\1\104\1\102\1\105\6\102\27\0\2\102\4\0\5\102"+
    "\4\0\13\102\1\106\1\102\1\107\10\102\27\0\2\102"+
    "\4\0\5\102\4\0\13\102\1\110\12\102\27\0\2\102"+
    "\4\0\5\102\4\0\11\102\1\111\3\102\1\112\10\102"+
    "\27\0\2\102\4\0\5\102\4\0\6\102\1\113\5\102"+
    "\1\114\11\102\27\0\2\102\4\0\5\102\4\0\5\102"+
    "\1\115\7\102\1\116\10\102\27\0\2\102\4\0\5\102"+
    "\4\0\5\102\1\117\20\102\27\0\2\102\4\0\5\102"+
    "\4\0\15\102\1\120\1\102\1\121\6\102\27\0\2\102"+
    "\4\0\5\102\4\0\5\102\1\122\7\102\1\123\10\102"+
    "\27\0\2\102\4\0\5\102\4\0\21\102\1\124\4\102"+
    "\27\0\2\102\4\0\5\102\4\0\10\102\1\125\15\102"+
    "\27\0\2\102\4\0\5\102\4\0\15\102\1\126\10\102"+
    "\27\0\2\102\4\0\5\102\4\0\10\102\1\127\15\102"+
    "\75\0\1\130\77\0\1\131\2\57\2\0\1\57\1\0"+
    "\27\57\1\0\36\57\5\0\1\132\2\0\1\132\24\0"+
    "\1\132\16\0\1\132\2\0\1\132\1\0\1\132\12\0"+
    "\13\133\1\134\60\133\2\72\1\135\1\136\1\72\1\0"+
    "\27\72\1\0\36\72\21\0\2\74\6\0\1\75\13\0"+
    "\1\75\42\0\1\137\1\0\1\137\2\0\2\140\72\0"+
    "\2\141\4\0\3\141\7\0\6\141\46\0\2\142\4\0"+
    "\5\142\4\0\26\142\27\0\2\142\4\0\5\142\4\0"+
    "\17\142\1\143\6\142\27\0\2\142\4\0\5\142\4\0"+
    "\15\142\1\144\10\142\27\0\2\142\4\0\5\142\4\0"+
    "\5\142\1\145\20\142\27\0\2\142\4\0\5\142\4\0"+
    "\1\142\1\146\24\142\27\0\2\142\4\0\5\142\4\0"+
    "\14\142\1\147\11\142\27\0\2\142\4\0\5\142\4\0"+
    "\20\142\1\150\5\142\27\0\2\142\4\0\5\142\4\0"+
    "\17\142\1\151\6\142\27\0\2\142\4\0\5\142\4\0"+
    "\1\152\20\142\1\153\4\142\27\0\2\142\4\0\5\142"+
    "\4\0\14\142\1\154\4\142\1\155\4\142\27\0\2\142"+
    "\4\0\5\142\4\0\15\142\1\156\10\142\27\0\2\142"+
    "\4\0\5\142\4\0\24\142\1\157\1\142\27\0\2\142"+
    "\4\0\5\142\4\0\15\142\1\160\10\142\27\0\2\142"+
    "\4\0\5\142\4\0\11\142\1\161\14\142\27\0\2\142"+
    "\4\0\5\142\4\0\1\142\1\162\17\142\1\163\4\142"+
    "\27\0\2\142\4\0\5\142\4\0\6\142\1\164\17\142"+
    "\27\0\2\142\4\0\5\142\4\0\1\142\1\165\15\142"+
    "\1\166\6\142\27\0\2\142\4\0\5\142\4\0\5\142"+
    "\1\167\20\142\27\0\2\142\4\0\5\142\4\0\11\142"+
    "\1\170\14\142\27\0\2\142\4\0\5\142\4\0\11\142"+
    "\1\171\14\142\100\0\1\172\1\0\13\133\1\173\73\133"+
    "\1\173\4\133\1\174\53\133\2\0\1\135\112\0\2\140"+
    "\72\0\2\175\4\0\5\175\4\0\26\175\27\0\2\175"+
    "\4\0\5\175\4\0\1\175\1\176\24\175\27\0\2\175"+
    "\4\0\5\175\4\0\13\175\1\177\12\175\27\0\2\175"+
    "\4\0\5\175\4\0\1\175\1\200\24\175\27\0\2\175"+
    "\4\0\5\175\4\0\20\175\1\201\5\175\27\0\2\175"+
    "\4\0\5\175\4\0\21\175\1\202\4\175\27\0\2\175"+
    "\4\0\5\175\4\0\5\175\1\203\20\175\27\0\2\175"+
    "\4\0\5\175\4\0\11\175\1\204\6\175\1\205\5\175"+
    "\27\0\2\175\4\0\5\175\4\0\16\175\1\206\7\175"+
    "\27\0\2\175\4\0\5\175\4\0\13\175\1\207\12\175"+
    "\27\0\2\175\4\0\5\175\4\0\14\175\1\210\11\175"+
    "\27\0\2\175\4\0\5\175\4\0\13\175\1\211\12\175"+
    "\27\0\2\175\4\0\5\175\4\0\22\175\1\212\3\175"+
    "\27\0\2\175\4\0\5\175\4\0\21\175\1\213\4\175"+
    "\27\0\2\175\4\0\5\175\4\0\11\175\1\214\14\175"+
    "\27\0\2\175\4\0\5\175\4\0\14\175\1\215\11\175"+
    "\27\0\2\175\4\0\5\175\4\0\4\175\1\216\21\175"+
    "\27\0\2\175\4\0\5\175\4\0\13\175\1\217\12\175"+
    "\6\0\13\133\1\173\4\133\1\135\53\133\21\0\2\220"+
    "\4\0\5\220\4\0\26\220\27\0\2\220\4\0\5\220"+
    "\4\0\25\220\1\221\27\0\2\220\4\0\5\220\4\0"+
    "\12\220\1\222\13\220\27\0\2\220\4\0\5\220\4\0"+
    "\20\220\1\223\5\220\27\0\2\220\4\0\5\220\4\0"+
    "\11\220\1\224\14\220\27\0\2\220\4\0\5\220\4\0"+
    "\14\220\1\225\11\220\27\0\2\220\4\0\5\220\4\0"+
    "\21\220\1\226\4\220\27\0\2\220\4\0\5\220\4\0"+
    "\21\220\1\227\4\220\27\0\2\220\4\0\5\220\4\0"+
    "\17\220\1\230\6\220\27\0\2\220\4\0\5\220\4\0"+
    "\11\220\1\231\14\220\27\0\2\220\4\0\5\220\4\0"+
    "\14\220\1\232\11\220\27\0\2\220\4\0\5\220\4\0"+
    "\5\220\1\233\20\220\27\0\2\234\4\0\5\234\4\0"+
    "\26\234\27\0\2\234\4\0\5\234\4\0\14\234\1\235"+
    "\11\234\27\0\2\234\4\0\5\234\4\0\21\234\1\236"+
    "\4\234\27\0\2\234\4\0\5\234\4\0\17\234\1\237"+
    "\6\234\27\0\2\234\4\0\5\234\4\0\14\234\1\240"+
    "\11\234\27\0\2\234\4\0\5\234\4\0\3\234\1\241"+
    "\22\234\27\0\2\234\4\0\5\234\4\0\7\234\1\242"+
    "\16\234\27\0\2\243\4\0\5\243\4\0\26\243\27\0"+
    "\2\243\4\0\5\243\4\0\22\243\1\244\3\243\27\0"+
    "\2\243\4\0\5\243\4\0\11\243\1\245\14\243\27\0"+
    "\2\246\4\0\5\246\4\0\26\246\27\0\2\246\4\0"+
    "\5\246\4\0\5\246\1\247\20\246\27\0\2\246\4\0"+
    "\5\246\4\0\14\246\1\250\11\246\27\0\2\251\4\0"+
    "\5\251\4\0\26\251\27\0\2\251\4\0\5\251\4\0"+
    "\7\251\1\252\16\251\27\0\2\253\4\0\5\253\4\0"+
    "\26\253\27\0\2\254\4\0\5\254\4\0\26\254\27\0"+
    "\2\255\4\0\5\255\4\0\26\255\27\0\2\256\4\0"+
    "\5\256\4\0\26\256\27\0\2\257\4\0\5\257\4\0"+
    "\26\257\27\0\2\260\4\0\5\260\4\0\26\260\27\0"+
    "\2\261\4\0\5\261\4\0\26\261\27\0\2\262\4\0"+
    "\5\262\4\0\26\262\27\0\2\263\4\0\5\263\4\0"+
    "\26\263\27\0\2\264\4\0\5\264\4\0\26\264\27\0"+
    "\2\265\4\0\5\265\4\0\26\265\27\0\2\266\4\0"+
    "\5\266\4\0\26\266\27\0\2\267\4\0\5\267\4\0"+
    "\26\267\27\0\2\270\4\0\5\270\4\0\26\270\27\0"+
    "\2\271\4\0\5\271\4\0\26\271\27\0\2\272\4\0"+
    "\5\272\4\0\26\272\27\0\2\273\4\0\5\273\4\0"+
    "\26\273\27\0\2\274\4\0\5\274\4\0\26\274\27\0"+
    "\2\275\4\0\5\275\4\0\26\275\27\0\2\276\4\0"+
    "\5\276\4\0\26\276\27\0\2\277\4\0\5\277\4\0"+
    "\26\277\27\0\2\300\4\0\5\300\4\0\26\300\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7920];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\3\11\2\1\2\11\1\1\2\11\2\1\1\11"+
    "\1\1\1\11\3\1\1\11\5\1\3\11\15\1\1\11"+
    "\1\1\1\11\2\1\1\11\1\1\7\11\1\0\1\1"+
    "\1\11\1\1\2\0\3\11\26\1\1\11\1\0\1\11"+
    "\2\0\1\11\1\1\1\0\32\1\1\11\1\0\104\1"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[192];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    public int ICV = 0;
    public boolean BOOL = false;
    public double REAL = 0;
    public StringBuilder string = new StringBuilder();

    private Symbol currSymbol = null;

    public Symbol currentSymbol() {
        return currSymbol;
    }

    public String nextToken() {
        try {
            currSymbol = nextSymbol();
            return currSymbol.getToken();
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    private double getValueOfScientificNumber(String scientific) {
        int index = 0;
        if (scientific.contains("e"))
            index = scientific.indexOf("e");
        else if (scientific.contains("E"))
            index = scientific.indexOf("E");
        double value = 0;
        if (index > 0) {
            double base = Double.valueOf(scientific.substring(0, index));
            int exp = 0;
            if (scientific.charAt(index + 1) == '+')
                exp = Integer.parseInt(scientific.substring(index + 2));
            else if (scientific.charAt(index + 1) == '-')
                exp = Integer.parseInt(scientific.substring(index + 2)) * -1;
            else
                exp = Integer.parseInt(scientific.substring(index + 1));

            value = base * Math.pow(10, exp);
        } else if (index < 0)
            value = Double.parseDouble(scientific);
        else
            throw new NumberFormatException();
        return value;
    }

    private int getValueOfHexadecimalNumber(String hex) {
        String pureHex = hex.charAt(0) == '-' ? "-" + hex.substring(3) : hex.substring(2);
        return Integer.parseInt(pureHex, 16);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexicalScanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Symbol nextSymbol() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return (new Symbol("$"));
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return new Symbol("Error", "Illegal character \"" + yytext() + "\" at line "+yyline+", column " + yycolumn);
            }
            // fall through
          case 73: break;
          case 2:
            { /* ignore */
            }
            // fall through
          case 74: break;
          case 3:
            { return new Symbol("lineTerminate");
            }
            // fall through
          case 75: break;
          case 4:
            { return (new Symbol("!"));
            }
            // fall through
          case 76: break;
          case 5:
            { yybegin(String);
        string.setLength(0);
        string.append("\"");
        return new Symbol("stringLiteral", yytext());
            }
            // fall through
          case 77: break;
          case 6:
            { return (new Symbol("%"));
            }
            // fall through
          case 78: break;
          case 7:
            { return (new Symbol("&"));
            }
            // fall through
          case 79: break;
          case 8:
            { return (new Symbol("("));
            }
            // fall through
          case 80: break;
          case 9:
            { return (new Symbol(")"));
            }
            // fall through
          case 81: break;
          case 10:
            { return (new Symbol("*"));
            }
            // fall through
          case 82: break;
          case 11:
            { return (new Symbol("+"));
            }
            // fall through
          case 83: break;
          case 12:
            { return (new Symbol("comma"));
            }
            // fall through
          case 84: break;
          case 13:
            { return (new Symbol("-"));
            }
            // fall through
          case 85: break;
          case 14:
            { return (new Symbol("."));
            }
            // fall through
          case 86: break;
          case 15:
            { return (new Symbol("/"));
            }
            // fall through
          case 87: break;
          case 16:
            { ICV = Integer.parseInt(yytext());
        return new Symbol("decimal", ICV);
            }
            // fall through
          case 88: break;
          case 17:
            { return (new Symbol(";"));
            }
            // fall through
          case 89: break;
          case 18:
            { return (new Symbol("<"));
            }
            // fall through
          case 90: break;
          case 19:
            { return (new Symbol("="));
            }
            // fall through
          case 91: break;
          case 20:
            { return (new Symbol(">"));
            }
            // fall through
          case 92: break;
          case 21:
            { return new Symbol("identifier", yytext());
            }
            // fall through
          case 93: break;
          case 22:
            { return (new Symbol("["));
            }
            // fall through
          case 94: break;
          case 23:
            { return (new Symbol("]"));
            }
            // fall through
          case 95: break;
          case 24:
            { return (new Symbol("^"));
            }
            // fall through
          case 96: break;
          case 25:
            { return (new Symbol("{"));
            }
            // fall through
          case 97: break;
          case 26:
            { return (new Symbol("}"));
            }
            // fall through
          case 98: break;
          case 27:
            { string.append(yytext());
        return new Symbol("stringLiteral", yytext());
            }
            // fall through
          case 99: break;
          case 28:
            { yybegin(YYINITIAL);
        string.append("\"");
        StringBuilder temp = string;
        string = new StringBuilder();
        return new Symbol("stringLiteral", yytext());
            }
            // fall through
          case 100: break;
          case 29:
            { return (new Symbol("!="));
            }
            // fall through
          case 101: break;
          case 30:
            { return (new Symbol("&&"));
            }
            // fall through
          case 102: break;
          case 31:
            { return (new Symbol("*="));
            }
            // fall through
          case 103: break;
          case 32:
            { return (new Symbol("++"));
            }
            // fall through
          case 104: break;
          case 33:
            { return (new Symbol("+="));
            }
            // fall through
          case 105: break;
          case 34:
            { return (new Symbol("--"));
            }
            // fall through
          case 106: break;
          case 35:
            { return (new Symbol("-="));
            }
            // fall through
          case 107: break;
          case 36:
            { //        return new Symbol("comment", yytext());
            }
            // fall through
          case 108: break;
          case 37:
            { return (new Symbol("/="));
            }
            // fall through
          case 109: break;
          case 38:
            { REAL = Double.valueOf(yytext());
        return new Symbol("realNumber", REAL);
            }
            // fall through
          case 110: break;
          case 39:
            { return (new Symbol("<="));
            }
            // fall through
          case 111: break;
          case 40:
            { return (new Symbol("=="));
            }
            // fall through
          case 112: break;
          case 41:
            { return (new Symbol(">="));
            }
            // fall through
          case 113: break;
          case 42:
            { return (new Symbol("fi"));
            }
            // fall through
          case 114: break;
          case 43:
            { return (new Symbol("if"));
            }
            // fall through
          case 115: break;
          case 44:
            { return (new Symbol("|"));
            }
            // fall through
          case 116: break;
          case 45:
            { string.append(yytext());
        return new Symbol("specialCharacter", yytext());
            }
            // fall through
          case 117: break;
          case 46:
            { REAL = getValueOfScientificNumber(yytext());
        return new Symbol("scientificNotation", yytext());
            }
            // fall through
          case 118: break;
          case 47:
            { ICV = getValueOfHexadecimalNumber(yytext());
        return new Symbol("hexadecimal", yytext());
            }
            // fall through
          case 119: break;
          case 48:
            { return (new Symbol("for"));
            }
            // fall through
          case 120: break;
          case 49:
            { return (new Symbol("int", yytext()));
            }
            // fall through
          case 121: break;
          case 50:
            { return (new Symbol("len"));
            }
            // fall through
          case 122: break;
          case 51:
            { return (new Symbol("let"));
            }
            // fall through
          case 123: break;
          case 52:
            { return (new Symbol("new"));
            }
            // fall through
          case 124: break;
          case 53:
            { return (new Symbol("rof"));
            }
            // fall through
          case 125: break;
          case 54:
            { return (new Symbol("“"));
            }
            // fall through
          case 126: break;
          case 55:
            { return (new Symbol("bool", yytext()));
            }
            // fall through
          case 127: break;
          case 56:
            { return (new Symbol("else"));
            }
            // fall through
          case 128: break;
          case 57:
            { return (new Symbol("loop"));
            }
            // fall through
          case 129: break;
          case 58:
            { return (new Symbol("pool"));
            }
            // fall through
          case 130: break;
          case 59:
            { return (new Symbol("real"));
            }
            // fall through
          case 131: break;
          case 60:
            { return (new Symbol("then"));
            }
            // fall through
          case 132: break;
          case 61:
            { return (new Symbol("void"));
            }
            // fall through
          case 133: break;
          case 62:
            { return (new Symbol("Array"));
            }
            // fall through
          case 134: break;
          case 63:
            { return (new Symbol("break"));
            }
            // fall through
          case 135: break;
          case 64:
            { return (new Symbol("class"));
            }
            // fall through
          case 136: break;
          case 65:
            { return (new Symbol("print"));
            }
            // fall through
          case 137: break;
          case 66:
            { return (new Symbol("while"));
            }
            // fall through
          case 138: break;
          case 67:
            { return (new Symbol("in_int"));
            }
            // fall through
          case 139: break;
          case 68:
            { return (new Symbol("return"));
            }
            // fall through
          case 140: break;
          case 69:
            { return (new Symbol("static"));
            }
            // fall through
          case 141: break;
          case 70:
            { return (new Symbol("string", yytext()));
            }
            // fall through
          case 142: break;
          case 71:
            { return (new Symbol("continue"));
            }
            // fall through
          case 143: break;
          case 72:
            { return (new Symbol("in_string"));
            }
            // fall through
          case 144: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
